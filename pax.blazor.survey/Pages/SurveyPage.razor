@page "/survey"
@page "/survey/{SurveyUrl}"
@using Microsoft.AspNetCore.Components.Authorization
@using pax.blazor.survey.Services
@using pax.blazor.survey.Models
@using pax.blazor.survey.Components
@inject DbService _db
@inject AuthenticationStateProvider _auth
@inject IJSRuntime _js

@if (isLoading)
{
    <div class="d-flex flex-row">
        <div class="flex-shrink-1 p-2">
            <h4><span class="oi spinner-grow spinner-grow-sm text-success"> </span></h4>
        </div>
        <div class="justify-content-center align-self-center">
            <h4 class="text-white-50">Loading...</h4>
        </div>
    </div>
}
else
{
    if (Survey != null && User != null)
    {
        if (showResult)
        {
            <ResultComponent survey="Survey"></ResultComponent>
        }
        else
        {
            <AnswerComponent Survey="Survey" User="User"></AnswerComponent>
        }
        @if (Survey.ShowResult)
        {
        
        <button type="button" class="btn btn-success mt-2 mb-4" @onclick="e => showResult = !showResult">@resultToggleString</button>

        }
    }
    else
    {
    <p>No surveys available.</p>
    }
}

@code {
    [Parameter]
    public string SurveyUrl { get; set; }

    bool isLoading = true;
    Survey Survey;
    User User;
    List<SurveyListItem> surveyList = new List<SurveyListItem>();
    string UserID = String.Empty;
    string UserName = String.Empty;
    bool showResult = false;
    string resultToggleString => showResult ? "Show Survey" : "Show Result";

    protected override async Task OnInitializedAsync()
    {
        UserName = await AuthenticationService.CheckAuth(_auth);
        Survey = await _db.GetSurveyAsync(SurveyUrl);

        if (Survey != null && Survey.AllowAnonymouse == false && String.IsNullOrEmpty(UserName))
        {
            Survey = null;
            isLoading = false;
            return;
        }

        User = await _db.GetUserAsync(Survey, UserName, UserID);

        if (Survey != null && User != null)
            isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (User == null)
            {
                UserID = await _js.InvokeAsync<string>("getID");
                User = await _db.GetUserAsync(Survey, UserName, UserID);
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    public void Update(Survey survey)
    {
        Survey = survey;
        StateHasChanged();
    }
}
