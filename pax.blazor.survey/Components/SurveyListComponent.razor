@using pax.blazor.survey.Models
@using pax.blazor.survey.Services
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject DbService _db
@inject ResultService _res

<h4>Survey List</h4>
<div class="row">
    <div class="col-auto">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Manage</th>
                    <th scope="col">ID</th>
                    <th scope="col">Title</th>
                    <th scope="col">Questions</th>
                    <th scope="col">Users</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="surveyList">
                    <tr class="pointer" @onclick="(() => ChangeSurvey(context.ID))">
                        <td>
                            <div class="btn-block">
                                <span role="button" class="btn btn-sm btn-secondary" @onclick:stopPropagation @onclick="e => ChangeSurvey(context.ID)">Edit</span>
                                <span role="button" class="btn btn-sm btn-danger" @onclick:stopPropagation @onclick="e => Delete(context.ID)">Delete</span>
                                <span role="button" class="btn btn-sm btn-success" @onclick:stopPropagation @onclick="e => Result(context.ID)">Result</span>
                                <span role="button" class="btn btn-sm btn-warning" @onclick:stopPropagation @onclick="e => Seed(context.ID)">Seed</span>
                            </div>
                        </td>
                        <td>@context.ID</td>
                        <td>@context.Title</td>
                        <td>@context.Questions</td>
                        <td>@context.Users</td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public Survey Survey { get; set; }

    [Parameter]
    public pax.blazor.survey.Pages.ManagePage ManagePage { get; set; }

    [Parameter]
    public pax.blazor.survey.Pages.SurveyPage SurveyPage { get; set; }

    [Parameter]
    public List<SurveyListItem> surveyList { get; set; } = new List<SurveyListItem>();

    int id = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (Survey != null && id != Survey.ID)
        {
            if (Survey.ID > 0)
            {
                var listItem = surveyList.FirstOrDefault(f => f.ID == Survey.ID);
                if (listItem == null)
                    surveyList.Add(new SurveyListItem() { ID = Survey.ID, Title = Survey.Title, Questions = Survey.Questions.Count(), Users = Survey.Users == null ? 0 : Survey.Users.Count() });
                else
                {
                    //surveyList.Remove(listItem);
                    //surveyList.Add(new SurveyListItem() { ID = Survey.ID, Title = Survey.Title, Questions = Survey.Questions.Count(), Users = Survey.Users == null ? 0 : Survey.Users.Count() });
                }

            }
            id = Survey.ID;
            StateHasChanged();
        }
    }

    public async void ChangeSurvey(int id)
    {
        Survey = await _db.GetSurveyAsync(id);
        if (ManagePage != null)
            ManagePage.Update(Survey);
        if (SurveyPage != null)
            SurveyPage.Update(Survey);
    }

    public async void Result(int id)
    {
        Survey survey = await _db.GetSurveyAsync(id);
        if (ManagePage != null)
            ManagePage.Update(survey, true);
        //await _res.CreateTrueResult(survey);
    }

    public async void Seed(int id)
    {
        Survey survey = await _db.GetSurveyAsync(id);
        await _db.SeedSurvey(survey);
    }

    public async void Delete(int id)
    {
        await _db.DeleteSurvey(id);
    }

}
